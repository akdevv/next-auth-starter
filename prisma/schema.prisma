generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  deviceName   String?
  ipAddress    String?
  lastActive   DateTime  @default(now())
  location     String?
  userAgent    String?
  isRevoked    Boolean   @default(false)
  revokedAt    DateTime?
  revokedBy    String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  lastPasswordUpdate   DateTime?
  backupCodes          String[]
  twoFactorEnabled     Boolean               @default(false)
  twoFactorSecret      String?
  accounts             Account[]
  sessions             Session[]
  twoFactorTokens      TwoFactorToken[]
  verificationAttempts VerificationAttempt[]
}

model VerificationToken {
  token     String   @unique
  code      String
  createdAt DateTime @default(now())
  email     String
  id        String   @id @default(cuid())
  expires   DateTime

  @@unique([email, token])
}

model VerificationAttempt {
  id        String   @id @default(cuid())
  userId    String
  email     String
  timestamp DateTime @default(now())
  token     String?
  success   Boolean  @default(false)
  type      String   @default("PASSWORD_RESET")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, timestamp])
  @@index([token])
  @@index([type, timestamp])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expires   DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId, expires])
}
